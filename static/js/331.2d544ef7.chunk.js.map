{"version":3,"file":"static/js/331.2d544ef7.chunk.js","mappings":"mQAOaA,EAAwB,SAAC,GAAmC,IAAD,EAAhCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,SAAaC,GAAY,YACtE,GAAsBC,EAAAA,EAAAA,IAASD,GAA/B,eAAOE,EAAP,KAAcC,EAAd,KAKA,GAAgCC,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KAEMC,IACDF,GAAYH,EAAMM,MAAMC,OAAOC,OAAS,GAAMP,EAAKQ,QAExD,OACE,iBAAKC,UAAS,kDACVL,EAAgBJ,EAAKU,MAAQ,QAAU,UAAa,IADxD,WAME,mBAAOC,QAASd,EAAMe,GAAtB,UAA2BjB,GACzB,0CACEc,UAAS,UACPL,EAAgBJ,EAAKU,MAAQ,UAAY,QAAW,KAElDb,GACAE,GALN,IAME,6BAAqBF,EAAMe,GAA3B,qBAA0Cf,EAAMe,GAAhD,SACAC,QAnBY,kBAAMV,GAAY,EAAlB,QAuBdC,IACE,gBACEQ,GAAE,UAAKf,EAAMe,GAAX,aACF,YAAU,SACVH,UAAU,sBAHZ,mBAKGT,EAAKU,aALR,QAKiB,YAKrB,gBAAKD,UAAU,UAAUG,GAAE,UAAKf,EAAMe,GAAX,SAAsBE,SAAS,KAA1D,SACGlB,MAIR,C,8LC9CYmB,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAGXC,EAAY,mCAAG,WAAOC,GAAP,2EACHC,EAAgDD,EAAzDE,SAAyBC,EAAgCH,EAA1CI,UAA8BC,EAAYL,EAAzBM,aAEvCT,GACEU,EAAAA,EAAAA,IAAkB,CAChBN,KAAAA,EACAE,MAAAA,EACAE,SAAAA,KAPe,2CAAH,sDAaZG,GAAeC,EAAAA,EAAAA,IAAU,CAC7BC,cAAe,CACbR,SAAU,GACVE,UAAW,GACXE,aAAc,IAEhBK,SAAS,WAAD,wBAAE,WAAOX,GAAP,0FAAkBD,EAAaC,IAA/B,2CAAF,mDAAC,GACTY,iBAAkBC,EAAAA,GAAW,CAE3BX,SAAUW,EAAAA,KACPC,IAAI,EAAG,iCACPC,IAAI,GAAI,mCACRC,QACC,aACA,+CAEDC,SAAS,wBAEZb,UAAWS,EAAAA,KACRG,QACC,sCACA,yBAEDC,SAAS,qBAEZX,aAAcO,EAAAA,KACXC,IAAI,EAAG,iCACPG,SAAS,4BAIhB,OACE,SAAC,KAAD,CAAgB/B,MAAOsB,EAAvB,UACE,UAAC,KAAD,YACA,SAACjC,EAAA,EAAD,CACIC,MAAM,WACNiB,GAAG,WACHQ,KAAK,WACLiB,YAAY,kBACZzC,SAAS,iEACT0C,KAAK,UAEP,SAAC5C,EAAA,EAAD,CACEC,MAAM,QACNiB,GAAG,YACHQ,KAAK,YACLiB,YAAY,mBACZzC,SAAS,GACT0C,KAAK,WAEP,SAAC5C,EAAA,EAAD,CACEC,MAAM,WACNiB,GAAG,eACHQ,KAAK,eACLiB,YAAY,iBACZzC,SAAS,4BACT0C,KAAK,cAGP,4BACE,mBAAQA,KAAK,SAAb,SAAsB,aACtB,mBAAQA,KAAK,QAAb,SAAqB,iBAM9B,ECrFYC,EAAW,WAGtB,OACE,4BACE,wBAAI,2BAEJ,SAACxB,EAAD,MA0BL,EAED,G","sources":["components/TextInputLiveFeedback/TextInputLiveFeedback.jsx","components/Forms/FormRegister/FormRegister.jsx","pages/Register.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {useField } from 'formik';\n\n\nimport './TextInputLiveFeedback.module.css'\n\n\nexport const TextInputLiveFeedback = ({ label, helpText, ...props }) => {\n  const [field, meta] = useField(props);\n\n  // Show inline feedback if EITHER\n  // - the input is focused AND value is longer than 2 characters\n  // - or, the has been visited (touched === true)\n  const [didFocus, setDidFocus] = useState(false);\n  const handleFocus = () => setDidFocus(true);\n  const showFeedback =\n    (!!didFocus && field.value.trim().length > 2) || meta.touched;\n\n  return (\n    <div className={`form-control items-center space-between ${\n        showFeedback ? (meta.error ? 'error' : 'success') : ''\n      }`}\n    >\n      {/* <div className=\"flex items-center space-between\"> */}\n\n      <label htmlFor={props.id}>{label}\n        <input\n          className={`${\n            showFeedback ? (meta.error ? 'invalid' : 'valid') : ''\n          }`}        \n          {...props}\n          {...field}\n          aria-describedby={`${props.id}-feedback ${props.id}-help`}\n          onFocus={handleFocus}\n        />\n      </label>\n\n      { showFeedback && (\n          <div\n            id={`${props.id}-feedback`}\n            aria-live=\"polite\"\n            className=\"my-feedback text-sm\"\n          >\n            {meta.error ?? 'âœ“'}\n          </div>\n      ) }\n\n      {/* </div> */}\n      <div className=\"text-xs\" id={`${props.id}-help`} tabIndex=\"-1\">\n        {helpText}\n      </div>\n    </div>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { useFormik, FormikProvider, Form } from 'formik';\nimport * as Yup from 'yup';\n\nimport { TextInputLiveFeedback } from 'components/TextInputLiveFeedback/TextInputLiveFeedback';\nimport { registerUserThunk } from '../../../redux/operations'\n\nexport const FormRegister = () => {\n  const dispatch = useDispatch()\n\n\n  const handleSubmit = async (values) => {\n    const {userName:name, userEmail:email, userPassword:password} = values;\n    \n    dispatch(\n      registerUserThunk({\n        name,\n        email,\n        password,\n    }))\n    \n  }\n\n  // ==== configForm\n  const configFormik = useFormik({\n    initialValues: { \n      userName: \"\", \n      userEmail: \"\", \n      userPassword: \"\", \n    },\n    onSubmit: async (values) => handleSubmit(values),\n    validationSchema: Yup.object({\n\n      userName: Yup.string()\n        .min(3, 'Must be at least 3 characters')\n        .max(40, 'Must be less than 40 characters')\n        .matches(\n          /^[\\w-/']+$/,\n          'Cannot contain special characters or spaces'\n        )\n        .required('Username is required'),\n\n      userEmail: Yup.string()\n        .matches(\n          /^[\\w._%+-]+@[\\w.-]+\\.[A-Za-z]{2,}$/i,\n          'Invalid email address'\n        )\n        .required('Email is required'),\n\n      userPassword: Yup.string()\n        .min(7, 'Must be at least 7 characters')\n        .required('Password is required'),\n    }),\n  });\n \n  return (\n    <FormikProvider value={configFormik}>\n      <Form>\n      <TextInputLiveFeedback\n          label=\"Username\"\n          id=\"userName\"\n          name=\"userName\"\n          placeholder=\"Enter your name\" \n          helpText=\"Must be 3-40 characters and cannot contain special characters.\"\n          type=\"text\"\n        />\n        <TextInputLiveFeedback\n          label=\"Email\"\n          id=\"userEmail\"\n          name=\"userEmail\"\n          placeholder=\"mister@gmail.com\" \n          helpText=\"\"\n          type=\"email\"\n        />\n        <TextInputLiveFeedback\n          label=\"Password\"\n          id=\"userPassword\"\n          name=\"userPassword\"\n          placeholder=\"Enter password\" \n          helpText=\"Must be more 7 characters\"\n          type=\"password\"\n        />\n\n        <div>\n          <button type=\"submit\">Sing Up</button>\n          <button type=\"reset\">Reset</button>\n        </div>\n      </Form>\n    </FormikProvider>\n  );\n\n}","// import { Dispatch } from \"react\"\n// import { Formik, Field, Form } from \"formik\"\n// import { authReducer } from \"redux/authSlice\";\n\nimport { FormRegister } from \"components/Forms/FormRegister/FormRegister\"\n\nexport const Register = () => { \n  // const dispatch = Dispatch();\n\n  return(\n    <div>\n      <h2>Register Your Account</h2>\n      \n      <FormRegister />\n      \n      {/* <Formik \n        initialValues={{ userName: \"\", userEmail: \"\", userPassword: \"\", }}\n        onSubmit={ async (values) => handleSubmit(values) }\n      >\n        <Form>\n          <Field name=\"userName\" type=\"text\" required minlenght={2} />\n          <Field \n            name=\"userEmail\" \n            type=\"email\" \n            // pattern = \"/^[a-zA-Z0-9]+@([a-zA-Z0-9]+\\.)+[a-zA-Z0-9]{2,4}$/\" \n            required \n          />\n          <Field \n            name=\"userPassword\" \n            type=\"password\" \n            minlenght={7}\n            required \n          />\n          <button type=\"submit\">Submit</button>\n        </Form>\n\n      </Formik> */}\n    </div>\n  )\n}\n\nexport default Register"],"names":["TextInputLiveFeedback","label","helpText","props","useField","field","meta","useState","didFocus","setDidFocus","showFeedback","value","trim","length","touched","className","error","htmlFor","id","onFocus","tabIndex","FormRegister","dispatch","useDispatch","handleSubmit","values","name","userName","email","userEmail","password","userPassword","registerUserThunk","configFormik","useFormik","initialValues","onSubmit","validationSchema","Yup","min","max","matches","required","placeholder","type","Register"],"sourceRoot":""}
{"version":3,"file":"static/js/499.ed4f086a.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Forms/FormContact/FormContact.jsx","components/Forms/Search/Search.jsx","redux/filters/selectors.js","components/Phonebook/Filter/Filter.styled.jsx","components/Phonebook/Filter/Filter.jsx","components/Phonebook/Contact/Contact.styled.jsx","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","components/Phonebook/Contact/Contact.jsx","components/Phonebook/ContactsList/ContactsList.styled.jsx","components/Phonebook/ContactsList/ContactsList.jsx","components/Phonebook/Phonebook.jsx","pages/ContactsPage.jsx"],"sourcesContent":["// Contacts\nexport const selectContacts = state => state.contacts.items;\nexport const selectLoading = state => state.contacts.loading;\nexport const selectError = state => state.contacts.error;","import { useDispatch, useSelector } from \"react-redux\";\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { Form, FormikProvider, useFormik } from \"formik\";\nimport * as Yup from 'yup';\n\nimport { addContactThunk, updateContactThunk } from \"redux/contacts/contactsOperations\";\nimport { selectContacts, } from \"redux/contacts/selectors\";\n\n// style\nimport { ButtonSaveContact as ButtonReset, ButtonSaveContact, ButtonsBox, } from '../Buttons.styles';\nimport { TextInputLiveFeedback } from \"../TextInputLiveFeedback/TextInputLiveFeedback\";\n\n\nexport const FormContact = ({contact, onClose}) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n \n  // onSubmit\n  const handleSubmit = values => {\n    if(contact.id) {\n      handleUpdate(values);\n      return\n    }\n\n    handleNewSave(values);\n  }\n\n  // Update\n  const handleUpdate = values => {\n    const {contactName:name, contactNumber:number} = values;\n\n    dispatch(updateContactThunk({\n      id: contact.id,\n      name, \n      number,\n      selected: contact.selected,\n    })).then(\n      toast.success(`${name} - Update in phonebook`)\n    );\n    \n    onClose?.();\n  }\n\n\n  // Save New\n  const handleNewSave = values => {\n    const {contactName:name, contactNumber:number} = values;\n\n    const isFound = (name) => {\n      const findName = name.trim().toLowerCase();\n\n      return contacts.some(item => item.name.toLowerCase() === findName)\n    }\n    \n    if (isFound(name)) {\n      toast.error(`${name} - find in phonebook base`);\n      return;\n    }\n\n    dispatch(addContactThunk({\n      name: name, \n      number: number\n    }));\n\n    toast.success(`${name} - Add in phonebook`);\n    onClose?.();\n  }\n\n  // ==== configFormik\n  const nameRegExp = \"^[a-zA-Zа-яА-ЯіІїЇєЄ]+(([' \\\\-][a-zA-Zа-яА-ЯіІїЇєЄ])?[a-zA-Zа-яА-ЯіІїЇєЄ]*)*$\"\n  const phoneRegExp=\"\\\\+?\\\\d{1,4}?[\\\\-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[\\\\-.\\\\s]?\\\\d{1,4}[\\\\-.\\\\s]?\\\\d{1,4}[\\\\-.\\\\s]?\\\\d{1,9}\"\n  \n  const configFormik = useFormik({\n    initialValues: { \n      contactName: contact.name, \n      contactNumber: contact.number, \n    },\n    onSubmit: async (values) => handleSubmit(values),\n    validationSchema: Yup.object({\n\n      contactName: Yup.string()\n        .min(3, 'Must be at least 3 characters')\n        .max(40, 'Must be less than 40 characters')\n        .matches( nameRegExp, \"Wrong characters\")\n        .required('Username is required'),\n\n      contactNumber: Yup.string()\n        .matches( phoneRegExp, \"Wrong number\")\n        .required('Phone number is required'),\n    }),\n  });\n\n  return (\n    <FormikProvider value={configFormik}>\n      <Form>\n      <TextInputLiveFeedback\n          label=\"Contact Name\"\n          id=\"contactName\"\n          name=\"contactName\"\n          placeholder=\"Enter contact name\" \n          helpText=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          type=\"text\"\n        />\n        <TextInputLiveFeedback\n          label=\"Phone number\"\n          id=\"contactNumber\"\n          name=\"contactNumber\"\n          placeholder=\"+380-67-111-11-11\" \n          helpText=\"+380-67-111-11-11. Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          type=\"tel\"\n        />\n\n        <ButtonsBox>\n          <ButtonSaveContact type=\"submit\">\n            {contact.id ? 'Update': 'Save' }\n          </ButtonSaveContact>\n\n          { !contact.id &&\n            <ButtonReset type=\"reset\">Reset</ButtonReset>\n          }\n        </ButtonsBox>\n\n      </Form>\n    </FormikProvider>\n  );\n}\n\n\n","import { useDispatch } from \"react-redux\"; \n\nimport { setFindQuery } from \"redux/filters/findQuerySlice\";\n\n// style\nimport { FieldBox, FieldLabel, FieldPosition, FieldInput } from \"../Forms.styled\"\n\n\nexport const Search = ({value}) => {\n  const dispatch = useDispatch();\n\n  const handleSearchChange = (e) => {\n    const query = e.currentTarget.value.trim().toLowerCase();\n    return dispatch(setFindQuery(query))\n  }\n\n  return (\n    <FieldBox>\n      <FieldLabel>Find contacts by name\n        <FieldPosition>\n          <FieldInput\n            type=\"text\"\n            value={value}\n            onChange={handleSearchChange}\n          />\n        </FieldPosition>\n      </FieldLabel>\n    </FieldBox>\n  )\n}","import { createSelector } from \"@reduxjs/toolkit\";\nimport { statusFilters, } from 'redux/constants';\nimport { selectContacts } from \"../contacts/selectors\";\n\n// Filters\nexport const selectStatusFilter = state => state.filters.status;\nexport const selectFindQuery = state => state.findQuery;\n\n// findQuery\nexport const selectVisibleContacts = createSelector(\n  [ selectContacts, selectStatusFilter, selectFindQuery],\n  (contacts, statusFilter, query) => {\n\n    const {findQuery} = query;\n    const visibleContacts = contacts.filter(contact => contact.name.toLowerCase()\n    .includes(findQuery.toLowerCase()));\n\n    switch (statusFilter) {\n      case statusFilters.active:\n        return visibleContacts.filter(contact => !contact.selected);\n      case statusFilters.selected:\n        return visibleContacts.filter(contact => contact.selected);\n      default:\n        return visibleContacts;\n    }\n});\n\n","import styled from \"@emotion/styled\";\n\n\nexport const Btn = styled.button`\n  display: inline-flex;\n  padding: 8px 12px;\n  border-radius: 4px;\n  border: none;\n  \n  font: inherit;\n  text-transform: capitalize;\n\n  cursor: pointer;\n  background-color: #e2e5e8;\n  color: black;\n\n  &:hover, &:active {\n    cursor: pointer;\n    background-color: #1976d2;\n    color: #fff;\n  }\n\n  &:active {\n    background-color: tomato;\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);;\n  }\n`\nexport const FilterBox = styled.div`\n  display: flex;\n  gap: 4px;\n  margin-top: 12px;\n`","/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\nimport { useSelector, useDispatch } from \"react-redux\"; \n\n\nimport { statusFilters } from \"redux/constants\"; \nimport { selectStatusFilter } from \"redux/filters/selectors\";\nimport { setStatusFilter } from \"redux/filters/filtersSlice\";\n\nimport { Btn, FilterBox } from \"./Filter.styled\";\n\n\nexport const Filter = () => { \n  const dispatch = useDispatch();\n  const filter = useSelector(selectStatusFilter);\n\n  const handleFilterChange = filter => dispatch(setStatusFilter(filter));\n  // const handleSearchChange = query => dispatch(searchContact(query))\n\n\n  const isSelectedStyle = css({\n    backgroundColor: '#1976d2',\n    color: '#fff',\n  });\n\n  const btn = Object.keys(statusFilters)\n  return (\n    <FilterBox>\n      {\n        btn.map((item, index) => {\n          const isSelected = (filter === statusFilters[item]);\n          \n          return (<Btn \n              css={ isSelected && isSelectedStyle }\n              key={`${index}-${item}`}\n              selected={isSelected}\n              onClick={() => handleFilterChange(statusFilters[item])}\n            >\n              {item}\n            </Btn>\n          )}\n        )\n      }\n    </FilterBox>\n  );\n  \n}\n\n","import styled from \"@emotion/styled\";\n\nexport const Card = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 4px;\n  padding: 8px 8px;\n`\n\nexport const FieldContact = styled.div`\n  width: 100%;\n  padding-left: 4px;\n  padding-right: 4px;\n  display: flex;\n  align-content: center;\n  flex-direction: column;\n  align-items: flex-start;\n  flex-wrap: nowrap;\n`\n\nexport const FieldNumber = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  flex-wrap: nowrap;\n`\n\nexport const FieldName = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  flex-wrap: nowrap;\n`\n\nexport const Name = styled.p`\n  margin: 0;\n  padding: 2px 8px;\n`\n\nexport const Number = styled.p`\n  margin: 0;\n  padding: 2px 8px;\n`\n\nexport const Checkbox = styled.input`\n  width: 18px;\n  height: 18px;\n  cursor: pointer;\n`\n","import styled from \"@emotion/styled\";\nimport {Button} from \"../Forms/Buttons.styles\"\n/*\n * Стили компонента Modal\n */\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 100;\n`\n\nexport const BoxModal = styled.div`\n  position: relative;\n  max-width: calc(100vw - 36px);\n  width: 270px;\n  padding-top: 68px;\n  padding-bottom: 36px;\n  padding-left: 12px;\n  padding-right: 12px;\n  background-color: var(--color-bg);\n`\n\nexport const ModalButtonClose = styled(Button)`\n  position: absolute;\n  top: 18px;\n  right: 12px;\n  border-radius: 4px;\n  color: var(--color-text);\n  background-color: var(--color-bg);\n`\n\nexport const ModalTitle = styled.div`\n  position: absolute;\n  top: 24px;\n  left: 0;\n  width: calc(100% - 24px);\n  padding-left: 12px;\n  font-weight: var(--fw-normal);\n  color: var(--color-text);\n  background-color: var(--color-bg);\n`\n\nexport const ModalImage = styled.img`\n  width: 100%;\n  height: calc(100vh - 48px);\n  object-fit: cover;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`\n","import React, { Component } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport PropTypes from 'prop-types';\n\n// import { Loader } from \"components/Loader/Loader\";\nimport { MdClose } from 'react-icons/md';\n\n// style\nimport { Overlay, BoxModal, ModalButtonClose, ModalImage, ModalTitle, } from \"./Modal.styled\";\n\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport class Modal extends Component {\n  \n  state = {\n    loaded: false,\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleKeyDown);\n\n    this.setState({ loaded: true });\n  }\n\n  onLoadedLargeImage = () => {\n    this.setState({ loaded: false });\n  }\n\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeyDown)\n  }\n\n\n  // close modal for press in ESC\n  handleKeyDown = e => {\n    if (e.code === 'Escape') {\n      // console.log(\"You press ESC\");\n      this.props.onClose();\n    }\n  }\n\n  \n  // close modal for click in backdrop || button\n  handleBackdropClick = e => { \n    if (e.currentTarget === e.target) { \n       this.props.onClose();\n    }\n  }\n\n  handleCloseButtonClick = e => { \n    this.props.onClose();\n  }\n\n  render() {\n    const { children, src='', title='' } = this.props;\n    // const { loaded } = this.state;\n    \n    return createPortal(\n      <Overlay onClick={ this.handleBackdropClick }>\n       \n        <BoxModal>\n          { title && \n            <ModalTitle>\n              { title }\n            </ModalTitle>\n          }\n          \n          { children }\n\n          { src && (<ModalImage onLoad={  this.onLoadedLargeImage } src={ src } alt={ title } /> )}\n\n          <ModalButtonClose type=\"button\" onClick={ this.handleCloseButtonClick }>\n            <MdClose size={12} />\n          </ModalButtonClose>\n\n\n        </BoxModal>\n      \n      </Overlay>\n    , modalRoot)\n  };\n}\n\nModal.propTypes = {\n  src : PropTypes.string,\n  title: PropTypes.string,\n  onClose : PropTypes.func.isRequired,\n};","import { useDispatch } from 'react-redux';\nimport { MdClose, MdEdit, MdAccountBox, MdOutlinePhoneAndroid,} from 'react-icons/md';\nimport PropTypes from 'prop-types'; // ES6'\n\nimport { deleteContactThunk, } from \"redux/contacts/contactsOperations\";\n\nimport { Card, Name, Checkbox, Number, FieldContact, FieldName, FieldNumber } from './Contact.styled';\nimport { ButtonDelete, ButtonEdit } from '../../Forms/Buttons.styles';\nimport { useState } from 'react';\nimport { Modal } from 'components/Modal/Modal';\nimport { FormContact } from 'components/Forms/FormContact/FormContact';\nimport { toggleCompleted } from 'redux/contacts/contactsSlice';\n\nexport const Contact = ({contact}) => {\n  const dispatch = useDispatch();\n  const {id, name, number, selected=false} = contact;\n\n  const [showModal, setShowModal] = useState(false);\n\n  const handleDelete = () => dispatch(deleteContactThunk(id));\n  // const handleToggle = () => dispatch(toggleCompletedThunk(contact));\n  const handleToggle = () => dispatch(toggleCompleted(contact));\n  const handleEdit = () => { toggleModal() };\n\n  // відкриття / закриття модалки\n  const toggleModal = () => {\n    setShowModal( !showModal );\n  }\n\n  return (\n    <Card>\n\n      <label>\n        <Checkbox \n          type=\"checkbox\"\n          checked={ selected }\n          onChange={ handleToggle } \n        />\n      </label>\n\n      <FieldContact>\n        <FieldName>\n          <MdAccountBox size={18} />\n          <Name> { name } </Name>\n        </FieldName>\n    \n        <FieldNumber>\n          <MdOutlinePhoneAndroid size={18} />\n          <Number> { number } </Number>\n        </FieldNumber>\n      </FieldContact>\n\n      <ButtonEdit type=\"button\" onClick={ handleEdit }>\n        <MdEdit size={18} /> \n      </ButtonEdit>\n\n      <ButtonDelete type=\"button\" onClick={ handleDelete }>\n        <MdClose size={18} />\n      </ButtonDelete>\n\n      { showModal && (\n          <Modal\n            title={'Edit/Update'}\n            onClose={ toggleModal }\n          >\n            <FormContact \n              contact={contact} \n              onClose={ toggleModal }\n            />\n          </Modal> \n        )}\n     \n    </Card>\n  )\n}\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      selected: PropTypes.bool,\n    }).isRequired\n}","import styled from \"@emotion/styled\";\n\nexport const ListContacts = styled.ul`\n  text-decoration: none;\n  margin: 0;\n  padding-left: 0;\n  list-style: none;\n  overflow-y: auto;\n  width: 100%;\n  max-height: calc(100vh - 391px); // 70+16+50+30-16+32+16+104+16+27+16+30+30=391\n  min-height: 240px;\n`\nexport const ListItem = styled.li`\n  background-color: lightsteelblue;\n\n  &:nth-of-type(odd) {\n    background-color: lightcyan;\n  }\n`\n\nexport const WarningBox = styled.div`\n  width: 100%;\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n  color: orangered;\n`\n\nexport const ItemButton = styled.button`\n  display: inline-block;\n  outline: 1px solid black;\n  border: none;\n  min-width: 75px;\n  height: 24px;\n  margin: 0;\n  padding: 0;\n  margin-right: 10px;\n  border-radius: 5px;\n\n  &:hover, &:active {\n    cursor: pointer;\n    background-color: cyan;\n    border: 1px solit black;\n  }\n\n  &:active {\n    background-color: tomato;\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);;\n  }\n`\n","import { useSelector } from 'react-redux';\n\nimport { selectVisibleContacts } from 'redux/filters/selectors';\nimport { Contact } from '../Contact/Contact';\nimport { WarningBox, ListContacts, ListItem, } from './ContactsList.styled';\n\n\nexport const ContactsList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const showContacts = Array.isArray(visibleContacts) && visibleContacts.length > 0;\n  \n  if (!showContacts) {\n    return (\n      <WarningBox>Sorry, you don't have more contacts</WarningBox>\n    )\n  }\n\n  return (\n    <ListContacts>\n      {\n        visibleContacts.map((item) =>\n          <ListItem key={ item.id }>\n            <Contact contact={ item } />\n          </ListItem>)\n      }\n    </ListContacts>\n  );\n}\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { MdAddIcCall } from 'react-icons/md';\n\n\n// redux\nimport { selectAuthetification } from \"redux/auth/selectors\";\nimport { requestContactsThunk } from \"redux/contacts/contactsOperations\";\nimport { selectError, selectLoading } from \"redux/contacts/selectors\";\n// components\nimport { Loader } from \"components/Loader/Loader\";\nimport { Section } from \"../Section/Section\";\nimport { FormContact } from \"../Forms/FormContact/FormContact\";\nimport { Search } from \"../Forms/Search/Search\";\nimport { Filter } from \"./Filter/Filter\";\nimport { ContactsList } from \"./ContactsList/ContactsList\";\nimport { Modal } from 'components/Modal/Modal';\n\n// style\nimport { ButtonAddContact, TextButton } from \"components/Forms/Buttons.styles\";\n\n\nexport const Phonebook = () => {\n  \n  const dispatch = useDispatch();\n\n  const loading = useSelector(selectLoading);\n  const error = useSelector(selectError);\n  const authetification = useSelector(selectAuthetification);\n\n  const [showModal, setShowModal] = useState(false);\n\n  useEffect(() =>  {\n    if (!authetification) return\n\n    dispatch(requestContactsThunk());\n  }, [dispatch, authetification]);\n\n  \n  const handleAddContact = () => {toggleModal()}\n  \n  // відкриття / закриття модалки\n  const toggleModal = () => {\n    setShowModal( !showModal );\n  }\n\n\n  return (\n    <>\n      <Section>\n        <ButtonAddContact onClick={handleAddContact}>\n          <TextButton>Add contact</TextButton>\n          <MdAddIcCall size={24} />\n        </ButtonAddContact>\n      </Section>\n\n      <Section>\n        <Search />\n        <Filter />\n      </Section>\n      \n      <Section title={\"Contacts\"}>\n\n        { loading && <Loader />}\n        { error && <p>Error... { error }</p>}\n        { loading && !error && <b>Request in progress...</b> }\n        \n        {!error && <ContactsList />}\n      </Section>\n      \n      { showModal && (\n          <Modal\n            title={'Add new'}\n            onClose={ toggleModal }\n          >\n            <FormContact contact={{name:\"\", number:\"\"}} onClose={ toggleModal }/>\n          </Modal> \n        )}\n    </>\n  )\n}\n","// import { useSelector } from 'react-redux';\n\n// import {selectAuthetification, } from 'redux/selectors';\nimport { Phonebook } from 'components/Phonebook/Phonebook';\n\nexport const ContactsPage = () => { \n\n  // const authetificated = useSelector(selectAuthetification);\n  // if (!authetificated) return;\n\n  return(\n      <Phonebook />\n  )\n}\n\nexport default ContactsPage"],"names":["selectContacts","state","contacts","items","selectLoading","loading","selectError","error","FormContact","contact","onClose","dispatch","useDispatch","useSelector","handleSubmit","values","id","handleUpdate","handleNewSave","name","contactName","number","contactNumber","updateContactThunk","selected","then","toast","findName","trim","toLowerCase","some","item","isFound","addContactThunk","configFormik","useFormik","initialValues","onSubmit","validationSchema","Yup","min","max","matches","required","value","TextInputLiveFeedback","label","placeholder","helpText","type","Search","onChange","e","query","currentTarget","setFindQuery","selectStatusFilter","filters","status","selectVisibleContacts","createSelector","findQuery","statusFilter","visibleContacts","filter","includes","statusFilters","Btn","styled","FilterBox","Filter","isSelectedStyle","css","backgroundColor","color","btn","Object","keys","map","index","isSelected","onClick","setStatusFilter","handleFilterChange","Card","FieldContact","FieldNumber","FieldName","Name","Number","Checkbox","Overlay","BoxModal","ModalButtonClose","Button","ModalTitle","ModalImage","modalRoot","document","querySelector","Modal","loaded","onLoadedLargeImage","setState","handleKeyDown","code","props","handleBackdropClick","target","handleCloseButtonClick","window","addEventListener","this","removeEventListener","children","src","title","createPortal","onLoad","alt","size","Component","Contact","useState","showModal","setShowModal","toggleModal","checked","toggleCompleted","deleteContactThunk","ListContacts","ListItem","WarningBox","ContactsList","Array","isArray","length","Phonebook","authetification","selectAuthetification","useEffect","requestContactsThunk","Section","Loader","ContactsPage"],"sourceRoot":""}
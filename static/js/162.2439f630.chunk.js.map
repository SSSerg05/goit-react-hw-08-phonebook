{"version":3,"file":"static/js/162.2439f630.chunk.js","mappings":"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","sources":["components/Forms/Buttons.styles.jsx","components/Forms/Forms.styled.jsx","components/Forms/TextInputLiveFeedback/TextInputLiveFeedback.jsx","components/Section/Section.styled.js","components/Section/Section.jsx","components/Forms/FormContact/FormContact.jsx","components/Phonebook/Search/Search.jsx","../node_modules/@emotion/react/dist/emotion-react.browser.esm.js","components/Phonebook/Filter/Filter.styled.jsx","../node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js","components/Phonebook/Filter/Filter.jsx","components/Phonebook/Contact/Contact.styled.jsx","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","components/Phonebook/Contact/Contact.jsx","components/Phonebook/ContactsList/ContactsList.styled.jsx","components/Phonebook/ContactsList/ContactsList.jsx","components/Phonebook/Phonebook.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 24px;\n  height: 24px;\n  padding: 0;\n  margin: 0;\n  border: none;\n  border-radius: 4px;\n  background-color: transparent;\n  cursor: pointer;\n \n  &:hover {\n    color: white;\n    background-color: #f44336;\n  }\n\n  &:active {\n    color: white;\n    background-color: red;\n  }\n`\nexport const ButtonDelete = styled(Button)`\n  color: #f44336;\n`\n\nexport const ButtonEdit = styled(Button)`\n  color: #1976d2;\n`\n\nexport const ButtonAddContact = styled(Button)`\n  width: 150px;\n  justify-content: space-around;\n  color: green;\n  background-color: #e2e5e8;\n`\n\nexport const ButtonSaveContact = styled(Button)`\n  /* margin-top: 48px; */\n  width: 68px;\n  color: white;\n  background-color: #1976d2;\n`\n\nexport const ButtonsBox = styled.div`\n  margin-top: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 24px;\n`","import styled from \"@emotion/styled\";\nimport { NavLink } from \"react-router-dom\";\n\n\nconst colorsValid = { \n  error: 'red', \n  success: 'green', \n  valid: 'green', \n  invalid: 'red', \n}\n\nexport const FieldBox = styled.div`\n  width: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  position: relative;\n\n  margin-bottom: 1rem;\n  margin-top: 1rem;\n\n  color: ${(props) =>\n    colorsValid[props.valid] ?? 'black'}; \n`\n\nexport const FieldLabel = styled.label`\n  display: block;\n  width: 100%;\n`\n\nexport const FieldInput = styled.input`\n  display: block;\n  width: calc(100% - 2*4px);\n  outline: 1px solid  ${(props) =>\n    colorsValid[props.valid] ?? 'rgba(33, 33, 33, 0.2)'}; \n  background-color: transparent;\n  border-radius: 4px;\n  border: none;\n  margin-top: 4px;\n  padding: 8px 4px;\n\n  &:hover,\n  &:focus-within {\n    outline: 1px solid blue;\n    background-color: rgb(232, 240, 254);\n    transition: outline 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n`\n\nexport const FieldPosition = styled.span`\n  position: relative;\n  margin-top: 4px;\n`\nexport const FieldFeedback = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  font-size: 0.875rem;\n`\nexport const FieldHelpText = styled.div`\n  /* position: absolute;\n  bottom: -14px;\n  left: 4px; */\n  padding-left: 4px;\n  padding-right: 4px;\n  font-size: 0.75rem;\n`\n\nexport const Link = styled(NavLink)`\n  display: flex;\n  align-items: center;\n\n  padding: 0;\n  text-decoration: none;\n  \n  font-weight: 500;\n  border-radius: 4px;\n  border: none;\n  /* background-color: #1976d2; */\n  color:  #1976d2;;\n\n  &:hover,\n  &:focus {\n    color: orangered;\n  }\n  &:active {\n    color: red;\n  }\n`;","import React, { useState } from 'react';\nimport {useField } from 'formik';\n\n// style\nimport { \n  FieldBox, \n  FieldLabel, \n  FieldPosition, \n  FieldInput, \n  FieldHelpText, \n  FieldFeedback} from \"../Forms.styled\"\n\n\nexport const TextInputLiveFeedback = ({ label, helpText, ...props }) => {\n  const [field, meta] = useField(props);\n\n  // Show inline feedback if EITHER\n  // - the input is focused AND value is longer than 2 characters\n  // - or, the has been visited (touched === true)\n  const [didFocus, setDidFocus] = useState(false);\n  const handleFocus = () => setDidFocus(true);\n  const showFeedback =\n    (!!didFocus && field.value.trim().length > 2) || meta.touched;\n\n  return (\n      <FieldBox\n        valid = {showFeedback ? (meta.error ? 'error' : 'success') : 'default'}\n      >\n        \n        <FieldLabel htmlFor={props.id}>\n          { label } \n          \n          <FieldPosition >\n            \n            <FieldInput\n              valid = {showFeedback ? (meta.error ? 'invalid' : 'valid') : 'default'}\n              type=\"text\"\n              name=\"name\"\n              // pattern=\"^[a-zA-Zа-яА-ЯіІїЇєЄ]+(([' \\-][a-zA-Zа-яА-ЯіІїЇєЄ])?[a-zA-Zа-яА-ЯіІїЇєЄ]*)*$\"\n              // title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              {...props}\n              {...field}\n              aria-describedby={`${props.id}-feedback ${props.id}-help`}\n              onFocus={handleFocus}\n            />\n\n          </FieldPosition>\n\n        </FieldLabel>\n        \n        { showFeedback && (\n          <FieldFeedback \n            id={`${props.id}-feedback`}\n            aria-live=\"polite\"\n          >\n            {meta.error ?? '✓'}\n          </FieldFeedback>\n        )}\n\n        <FieldHelpText\n          id={`${props.id}-help`}\n          tabIndex=\"-1\"\n        >\n          {helpText}\n        </FieldHelpText>\n\n      </FieldBox>\n  );\n};\n","import styled from \"@emotion/styled/macro\";\n\nexport const Title = styled.h3`\n  /* min-width: 270px; */\n  margin: 0;\n  padding: 0;\n  margin-bottom: 16px;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 24px;\n  font-weight: 700;\n  letter-spacing: 0.05rem;\n  text-align: center;\n`\n\nexport const SectionApp = styled.section`\n  margin-top: 16px;\n  margin-bottom: 16px;\n`\n\n// export const DivSecond = styled.div`\n//   width: 50px;\n//   height: 50px;\n//   background-color: green;\n// `\n// export const DivThree = styled.div`\n//   width: 100px;\n//   height: 100px;\n//   background-color: yellow;\n// `\n\n// export const DivParent = styled.div`\n//   background-color: red;\n\n//   &:hover {\n//     background-color: blue;\n//     & ${DivSecond},  ${DivThree} {\n//       background-color: blue;\n//     } \n//   }\n// `\n","import PropTypes from 'prop-types'; // ES6'\nimport { Title, SectionApp } from './Section.styled';\n\n\nexport const Section = ({ title, children }) => {\n  return (\n    <SectionApp>\n      { title && <Title>{ title }</Title> }\n      { children }\n    </SectionApp>\n  );\n}\n\nSection.propTypes = {\n  title : PropTypes.string,\n}","import { useDispatch, useSelector } from \"react-redux\";\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { Form, FormikProvider, useFormik } from \"formik\";\nimport * as Yup from 'yup';\n\nimport { addContactThunk, updateContactThunk } from \"redux/operations\";\nimport { selectContacts, } from \"redux/selectors\";\n\n// style\n//import { FieldBox, FieldLabel, FieldPosition, FieldInput, } from \"../Forms.styled\"\nimport { ButtonSaveContact as ButtonReset, ButtonSaveContact, ButtonsBox, } from '../Buttons.styles';\nimport { TextInputLiveFeedback } from \"../TextInputLiveFeedback/TextInputLiveFeedback\";\n\n\nexport const FormContact = ({contact, onClose}) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n \n  // onSubmit\n  const handleSubmit = values => {\n    if(contact.id) {\n      handleUpdate(values);\n      return\n    }\n\n    handleNewSave(values);\n  }\n\n  // Update\n  const handleUpdate = values => {\n    const {contactName:name, contactNumber:number} = values;\n\n    dispatch(updateContactThunk({\n      id: contact.id,\n      name, \n      number,\n      selected: contact.selected,\n    }));\n    toast.success(`${name} - Update in phonebook`);\n    onClose?.();\n  }\n\n\n  // Save New\n  const handleNewSave = values => {\n    const {contactName:name, contactNumber:number} = values;\n\n    const isFound = (name) => {\n      const findName = name.trim().toLowerCase();\n\n      return contacts.some(item => item.name.toLowerCase() === findName)\n    }\n    \n    if (isFound(name)) {\n      toast.error(`${name} - find in phonebook base`);\n      return;\n    }\n\n    dispatch(addContactThunk({\n      name: name, \n      number: number\n    }));\n\n    toast.success(`${name} - Add in phonebook`);\n    onClose?.();\n  }\n\n  // ==== configFormik\n  const nameRegExp = \"^[a-zA-Zа-яА-ЯіІїЇєЄ]+(([' \\\\-][a-zA-Zа-яА-ЯіІїЇєЄ])?[a-zA-Zа-яА-ЯіІїЇєЄ]*)*$\"\n  const phoneRegExp=\"\\\\+?\\\\d{1,4}?[\\\\-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[\\\\-.\\\\s]?\\\\d{1,4}[\\\\-.\\\\s]?\\\\d{1,4}[\\\\-.\\\\s]?\\\\d{1,9}\"\n  \n  const configFormik = useFormik({\n    initialValues: { \n      contactName: contact.name, \n      contactNumber: contact.number, \n    },\n    onSubmit: async (values) => handleSubmit(values),\n    validationSchema: Yup.object({\n\n      contactName: Yup.string()\n        .min(3, 'Must be at least 3 characters')\n        .max(40, 'Must be less than 40 characters')\n        .matches( nameRegExp, \"Wrong characters\")\n        .required('Username is required'),\n\n      contactNumber: Yup.string()\n        .matches( phoneRegExp, \"Wrong number\")\n        .required('Phone number is required'),\n    }),\n  });\n\n  return (\n    <FormikProvider value={configFormik}>\n      <Form>\n      <TextInputLiveFeedback\n          label=\"Contact Name\"\n          id=\"contactName\"\n          name=\"contactName\"\n          placeholder=\"Enter contact name\" \n          helpText=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          type=\"text\"\n        />\n        <TextInputLiveFeedback\n          label=\"Phone number\"\n          id=\"contactNumber\"\n          name=\"contactNumber\"\n          placeholder=\"+380-67-111-11-11\" \n          helpText=\"+380-67-111-11-11. Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          type=\"tel\"\n        />\n\n        <ButtonsBox>\n          <ButtonSaveContact type=\"submit\">\n            {contact.id ? 'Update': 'Save' }\n          </ButtonSaveContact>\n\n          { !contact.id &&\n            <ButtonReset type=\"reset\">Reset</ButtonReset>\n          }\n        </ButtonsBox>\n\n      </Form>\n    </FormikProvider>\n  );\n}\n\n\n","import { useDispatch } from \"react-redux\"; \n\nimport { setFindQuery } from \"redux/findQuerySlice\";\n\n// style\nimport { FieldBox, FieldLabel, FieldPosition, FieldInput } from \"../../Forms/Forms.styled\"\n\n\nexport const Search = ({value}) => {\n  const dispatch = useDispatch();\n\n  const handleSearchChange = (e) => {\n    const query = e.currentTarget.value.trim().toLowerCase();\n    return dispatch(setFindQuery(query))\n  }\n\n  return (\n    <FieldBox>\n      <FieldLabel>Find contacts by name\n        <FieldPosition>\n          <FieldInput\n            type=\"text\"\n            value={value}\n            onChange={handleSearchChange}\n          />\n        </FieldPosition>\n      </FieldLabel>\n    </FieldBox>\n  )\n}","import { h as hasOwnProperty, E as Emotion, c as createEmotionProps, w as withEmotionCache, T as ThemeContext, i as isBrowser$1 } from './emotion-element-c39617d8.browser.esm.js';\nexport { C as CacheProvider, T as ThemeContext, a as ThemeProvider, _ as __unsafe_useEmotionCache, u as useTheme, w as withEmotionCache, b as withTheme } from './emotion-element-c39617d8.browser.esm.js';\nimport * as React from 'react';\nimport { insertStyles, registerStyles, getRegisteredStyles } from '@emotion/utils';\nimport { useInsertionEffectWithLayoutFallback, useInsertionEffectAlwaysWithSyncFallback } from '@emotion/use-insertion-effect-with-fallbacks';\nimport { serializeStyles } from '@emotion/serialize';\nimport '@emotion/cache';\nimport '@babel/runtime/helpers/extends';\nimport '@emotion/weak-memoize';\nimport '../_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js';\nimport 'hoist-non-react-statics';\n\nvar pkg = {\n\tname: \"@emotion/react\",\n\tversion: \"11.11.1\",\n\tmain: \"dist/emotion-react.cjs.js\",\n\tmodule: \"dist/emotion-react.esm.js\",\n\tbrowser: {\n\t\t\"./dist/emotion-react.esm.js\": \"./dist/emotion-react.browser.esm.js\"\n\t},\n\texports: {\n\t\t\".\": {\n\t\t\tmodule: {\n\t\t\t\tworker: \"./dist/emotion-react.worker.esm.js\",\n\t\t\t\tbrowser: \"./dist/emotion-react.browser.esm.js\",\n\t\t\t\t\"default\": \"./dist/emotion-react.esm.js\"\n\t\t\t},\n\t\t\t\"import\": \"./dist/emotion-react.cjs.mjs\",\n\t\t\t\"default\": \"./dist/emotion-react.cjs.js\"\n\t\t},\n\t\t\"./jsx-runtime\": {\n\t\t\tmodule: {\n\t\t\t\tworker: \"./jsx-runtime/dist/emotion-react-jsx-runtime.worker.esm.js\",\n\t\t\t\tbrowser: \"./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\",\n\t\t\t\t\"default\": \"./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js\"\n\t\t\t},\n\t\t\t\"import\": \"./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.mjs\",\n\t\t\t\"default\": \"./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js\"\n\t\t},\n\t\t\"./_isolated-hnrs\": {\n\t\t\tmodule: {\n\t\t\t\tworker: \"./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.worker.esm.js\",\n\t\t\t\tbrowser: \"./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js\",\n\t\t\t\t\"default\": \"./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js\"\n\t\t\t},\n\t\t\t\"import\": \"./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.mjs\",\n\t\t\t\"default\": \"./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js\"\n\t\t},\n\t\t\"./jsx-dev-runtime\": {\n\t\t\tmodule: {\n\t\t\t\tworker: \"./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.worker.esm.js\",\n\t\t\t\tbrowser: \"./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js\",\n\t\t\t\t\"default\": \"./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js\"\n\t\t\t},\n\t\t\t\"import\": \"./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.mjs\",\n\t\t\t\"default\": \"./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js\"\n\t\t},\n\t\t\"./package.json\": \"./package.json\",\n\t\t\"./types/css-prop\": \"./types/css-prop.d.ts\",\n\t\t\"./macro\": {\n\t\t\ttypes: {\n\t\t\t\t\"import\": \"./macro.d.mts\",\n\t\t\t\t\"default\": \"./macro.d.ts\"\n\t\t\t},\n\t\t\t\"default\": \"./macro.js\"\n\t\t}\n\t},\n\ttypes: \"types/index.d.ts\",\n\tfiles: [\n\t\t\"src\",\n\t\t\"dist\",\n\t\t\"jsx-runtime\",\n\t\t\"jsx-dev-runtime\",\n\t\t\"_isolated-hnrs\",\n\t\t\"types/*.d.ts\",\n\t\t\"macro.*\"\n\t],\n\tsideEffects: false,\n\tauthor: \"Emotion Contributors\",\n\tlicense: \"MIT\",\n\tscripts: {\n\t\t\"test:typescript\": \"dtslint types\"\n\t},\n\tdependencies: {\n\t\t\"@babel/runtime\": \"^7.18.3\",\n\t\t\"@emotion/babel-plugin\": \"^11.11.0\",\n\t\t\"@emotion/cache\": \"^11.11.0\",\n\t\t\"@emotion/serialize\": \"^1.1.2\",\n\t\t\"@emotion/use-insertion-effect-with-fallbacks\": \"^1.0.1\",\n\t\t\"@emotion/utils\": \"^1.2.1\",\n\t\t\"@emotion/weak-memoize\": \"^0.3.1\",\n\t\t\"hoist-non-react-statics\": \"^3.3.1\"\n\t},\n\tpeerDependencies: {\n\t\treact: \">=16.8.0\"\n\t},\n\tpeerDependenciesMeta: {\n\t\t\"@types/react\": {\n\t\t\toptional: true\n\t\t}\n\t},\n\tdevDependencies: {\n\t\t\"@definitelytyped/dtslint\": \"0.0.112\",\n\t\t\"@emotion/css\": \"11.11.0\",\n\t\t\"@emotion/css-prettifier\": \"1.1.3\",\n\t\t\"@emotion/server\": \"11.11.0\",\n\t\t\"@emotion/styled\": \"11.11.0\",\n\t\t\"html-tag-names\": \"^1.1.2\",\n\t\treact: \"16.14.0\",\n\t\t\"svg-tag-names\": \"^1.1.1\",\n\t\ttypescript: \"^4.5.5\"\n\t},\n\trepository: \"https://github.com/emotion-js/emotion/tree/main/packages/react\",\n\tpublishConfig: {\n\t\taccess: \"public\"\n\t},\n\t\"umd:main\": \"dist/emotion-react.umd.min.js\",\n\tpreconstruct: {\n\t\tentrypoints: [\n\t\t\t\"./index.js\",\n\t\t\t\"./jsx-runtime.js\",\n\t\t\t\"./jsx-dev-runtime.js\",\n\t\t\t\"./_isolated-hnrs.js\"\n\t\t],\n\t\tumdName: \"emotionReact\",\n\t\texports: {\n\t\t\tenvConditions: [\n\t\t\t\t\"browser\",\n\t\t\t\t\"worker\"\n\t\t\t],\n\t\t\textra: {\n\t\t\t\t\"./types/css-prop\": \"./types/css-prop.d.ts\",\n\t\t\t\t\"./macro\": {\n\t\t\t\t\ttypes: {\n\t\t\t\t\t\t\"import\": \"./macro.d.mts\",\n\t\t\t\t\t\t\"default\": \"./macro.d.ts\"\n\t\t\t\t\t},\n\t\t\t\t\t\"default\": \"./macro.js\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\nvar jsx = function jsx(type, props) {\n  var args = arguments;\n\n  if (props == null || !hasOwnProperty.call(props, 'css')) {\n    // $FlowFixMe\n    return React.createElement.apply(undefined, args);\n  }\n\n  var argsLength = args.length;\n  var createElementArgArray = new Array(argsLength);\n  createElementArgArray[0] = Emotion;\n  createElementArgArray[1] = createEmotionProps(type, props);\n\n  for (var i = 2; i < argsLength; i++) {\n    createElementArgArray[i] = args[i];\n  } // $FlowFixMe\n\n\n  return React.createElement.apply(null, createElementArgArray);\n};\n\nvar warnedAboutCssPropForGlobal = false; // maintain place over rerenders.\n// initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild\n// initial client-side render from SSR, use place of hydrating tag\n\nvar Global = /* #__PURE__ */withEmotionCache(function (props, cache) {\n  if (process.env.NODE_ENV !== 'production' && !warnedAboutCssPropForGlobal && ( // check for className as well since the user is\n  // probably using the custom createElement which\n  // means it will be turned into a className prop\n  // $FlowFixMe I don't really want to add it to the type since it shouldn't be used\n  props.className || props.css)) {\n    console.error(\"It looks like you're using the css prop on Global, did you mean to use the styles prop instead?\");\n    warnedAboutCssPropForGlobal = true;\n  }\n\n  var styles = props.styles;\n  var serialized = serializeStyles([styles], undefined, React.useContext(ThemeContext));\n\n  if (!isBrowser$1) {\n    var _ref;\n\n    var serializedNames = serialized.name;\n    var serializedStyles = serialized.styles;\n    var next = serialized.next;\n\n    while (next !== undefined) {\n      serializedNames += ' ' + next.name;\n      serializedStyles += next.styles;\n      next = next.next;\n    }\n\n    var shouldCache = cache.compat === true;\n    var rules = cache.insert(\"\", {\n      name: serializedNames,\n      styles: serializedStyles\n    }, cache.sheet, shouldCache);\n\n    if (shouldCache) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(\"style\", (_ref = {}, _ref[\"data-emotion\"] = cache.key + \"-global \" + serializedNames, _ref.dangerouslySetInnerHTML = {\n      __html: rules\n    }, _ref.nonce = cache.sheet.nonce, _ref));\n  } // yes, i know these hooks are used conditionally\n  // but it is based on a constant that will never change at runtime\n  // it's effectively like having two implementations and switching them out\n  // so it's not actually breaking anything\n\n\n  var sheetRef = React.useRef();\n  useInsertionEffectWithLayoutFallback(function () {\n    var key = cache.key + \"-global\"; // use case of https://github.com/emotion-js/emotion/issues/2675\n\n    var sheet = new cache.sheet.constructor({\n      key: key,\n      nonce: cache.sheet.nonce,\n      container: cache.sheet.container,\n      speedy: cache.sheet.isSpeedy\n    });\n    var rehydrating = false; // $FlowFixMe\n\n    var node = document.querySelector(\"style[data-emotion=\\\"\" + key + \" \" + serialized.name + \"\\\"]\");\n\n    if (cache.sheet.tags.length) {\n      sheet.before = cache.sheet.tags[0];\n    }\n\n    if (node !== null) {\n      rehydrating = true; // clear the hash so this node won't be recognizable as rehydratable by other <Global/>s\n\n      node.setAttribute('data-emotion', key);\n      sheet.hydrate([node]);\n    }\n\n    sheetRef.current = [sheet, rehydrating];\n    return function () {\n      sheet.flush();\n    };\n  }, [cache]);\n  useInsertionEffectWithLayoutFallback(function () {\n    var sheetRefCurrent = sheetRef.current;\n    var sheet = sheetRefCurrent[0],\n        rehydrating = sheetRefCurrent[1];\n\n    if (rehydrating) {\n      sheetRefCurrent[1] = false;\n      return;\n    }\n\n    if (serialized.next !== undefined) {\n      // insert keyframes\n      insertStyles(cache, serialized.next, true);\n    }\n\n    if (sheet.tags.length) {\n      // if this doesn't exist then it will be null so the style element will be appended\n      var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;\n      sheet.before = element;\n      sheet.flush();\n    }\n\n    cache.insert(\"\", serialized, sheet, false);\n  }, [cache, serialized.name]);\n  return null;\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  Global.displayName = 'EmotionGlobal';\n}\n\nfunction css() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return serializeStyles(args);\n}\n\nvar keyframes = function keyframes() {\n  var insertable = css.apply(void 0, arguments);\n  var name = \"animation-\" + insertable.name; // $FlowFixMe\n\n  return {\n    name: name,\n    styles: \"@keyframes \" + name + \"{\" + insertable.styles + \"}\",\n    anim: 1,\n    toString: function toString() {\n      return \"_EMO_\" + this.name + \"_\" + this.styles + \"_EMO_\";\n    }\n  };\n};\n\nvar classnames = function classnames(args) {\n  var len = args.length;\n  var i = 0;\n  var cls = '';\n\n  for (; i < len; i++) {\n    var arg = args[i];\n    if (arg == null) continue;\n    var toAdd = void 0;\n\n    switch (typeof arg) {\n      case 'boolean':\n        break;\n\n      case 'object':\n        {\n          if (Array.isArray(arg)) {\n            toAdd = classnames(arg);\n          } else {\n            if (process.env.NODE_ENV !== 'production' && arg.styles !== undefined && arg.name !== undefined) {\n              console.error('You have passed styles created with `css` from `@emotion/react` package to the `cx`.\\n' + '`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.');\n            }\n\n            toAdd = '';\n\n            for (var k in arg) {\n              if (arg[k] && k) {\n                toAdd && (toAdd += ' ');\n                toAdd += k;\n              }\n            }\n          }\n\n          break;\n        }\n\n      default:\n        {\n          toAdd = arg;\n        }\n    }\n\n    if (toAdd) {\n      cls && (cls += ' ');\n      cls += toAdd;\n    }\n  }\n\n  return cls;\n};\n\nfunction merge(registered, css, className) {\n  var registeredStyles = [];\n  var rawClassName = getRegisteredStyles(registered, registeredStyles, className);\n\n  if (registeredStyles.length < 2) {\n    return className;\n  }\n\n  return rawClassName + css(registeredStyles);\n}\n\nvar Insertion = function Insertion(_ref) {\n  var cache = _ref.cache,\n      serializedArr = _ref.serializedArr;\n  useInsertionEffectAlwaysWithSyncFallback(function () {\n\n    for (var i = 0; i < serializedArr.length; i++) {\n      insertStyles(cache, serializedArr[i], false);\n    }\n  });\n\n  return null;\n};\n\nvar ClassNames = /* #__PURE__ */withEmotionCache(function (props, cache) {\n  var hasRendered = false;\n  var serializedArr = [];\n\n  var css = function css() {\n    if (hasRendered && process.env.NODE_ENV !== 'production') {\n      throw new Error('css can only be used during render');\n    }\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var serialized = serializeStyles(args, cache.registered);\n    serializedArr.push(serialized); // registration has to happen here as the result of this might get consumed by `cx`\n\n    registerStyles(cache, serialized, false);\n    return cache.key + \"-\" + serialized.name;\n  };\n\n  var cx = function cx() {\n    if (hasRendered && process.env.NODE_ENV !== 'production') {\n      throw new Error('cx can only be used during render');\n    }\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return merge(cache.registered, css, classnames(args));\n  };\n\n  var content = {\n    css: css,\n    cx: cx,\n    theme: React.useContext(ThemeContext)\n  };\n  var ele = props.children(content);\n  hasRendered = true;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Insertion, {\n    cache: cache,\n    serializedArr: serializedArr\n  }), ele);\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  ClassNames.displayName = 'EmotionClassNames';\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  var isBrowser = \"object\" !== 'undefined'; // #1727, #2905 for some reason Jest and Vitest evaluate modules twice if some consuming module gets mocked\n\n  var isTestEnv = typeof jest !== 'undefined' || typeof vi !== 'undefined';\n\n  if (isBrowser && !isTestEnv) {\n    // globalThis has wide browser support - https://caniuse.com/?search=globalThis, Node.js 12 and later\n    var globalContext = // $FlowIgnore\n    typeof globalThis !== 'undefined' ? globalThis // eslint-disable-line no-undef\n    : isBrowser ? window : global;\n    var globalKey = \"__EMOTION_REACT_\" + pkg.version.split('.')[0] + \"__\";\n\n    if (globalContext[globalKey]) {\n      console.warn('You are loading @emotion/react when it is already loaded. Running ' + 'multiple instances may cause problems. This can happen if multiple ' + 'versions are used, or if multiple builds of the same version are ' + 'used.');\n    }\n\n    globalContext[globalKey] = true;\n  }\n}\n\nexport { ClassNames, Global, jsx as createElement, css, jsx, keyframes };\n","import styled from \"@emotion/styled\";\n\n\nexport const Btn = styled.button`\n  display: inline-flex;\n  padding: 8px 12px;\n  border-radius: 4px;\n  border: none;\n  \n  font: inherit;\n  text-transform: capitalize;\n\n  cursor: pointer;\n  background-color: #e2e5e8;\n  color: black;\n\n  &:hover, &:active {\n    cursor: pointer;\n    background-color: #1976d2;\n    color: #fff;\n  }\n\n  &:active {\n    background-color: tomato;\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);;\n  }\n`\nexport const FilterBox = styled.div`\n  display: flex;\n  gap: 4px;\n  margin-top: 12px;\n`","import * as ReactJSXRuntime from 'react/jsx-runtime';\nimport { h as hasOwnProperty, E as Emotion, c as createEmotionProps } from '../../dist/emotion-element-c39617d8.browser.esm.js';\nimport 'react';\nimport '@emotion/cache';\nimport '@babel/runtime/helpers/extends';\nimport '@emotion/weak-memoize';\nimport '../../_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js';\nimport 'hoist-non-react-statics';\nimport '@emotion/utils';\nimport '@emotion/serialize';\nimport '@emotion/use-insertion-effect-with-fallbacks';\n\nvar Fragment = ReactJSXRuntime.Fragment;\nfunction jsx(type, props, key) {\n  if (!hasOwnProperty.call(props, 'css')) {\n    return ReactJSXRuntime.jsx(type, props, key);\n  }\n\n  return ReactJSXRuntime.jsx(Emotion, createEmotionProps(type, props), key);\n}\nfunction jsxs(type, props, key) {\n  if (!hasOwnProperty.call(props, 'css')) {\n    return ReactJSXRuntime.jsxs(type, props, key);\n  }\n\n  return ReactJSXRuntime.jsxs(Emotion, createEmotionProps(type, props), key);\n}\n\nexport { Fragment, jsx, jsxs };\n","/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\nimport { useSelector, useDispatch } from \"react-redux\"; \n\n\nimport { statusFilters } from \"redux/constants\"; \nimport { selectStatusFilter } from \"redux/selectors\";\nimport { setStatusFilter } from \"redux/filtersSlice\";\n\nimport { Btn, FilterBox } from \"./Filter.styled\";\n\n\nexport const Filter = () => { \n  const dispatch = useDispatch();\n  const filter = useSelector(selectStatusFilter);\n\n  const handleFilterChange = filter => dispatch(setStatusFilter(filter));\n  // const handleSearchChange = query => dispatch(searchContact(query))\n\n\n  const isSelectedStyle = css({\n    backgroundColor: '#1976d2',\n    color: '#fff',\n  });\n\n  const btn = Object.keys(statusFilters)\n  return (\n    <FilterBox>\n      {\n        btn.map((item, index) => {\n          const isSelected = (filter === statusFilters[item]);\n          \n          return (<Btn \n              css={ isSelected && isSelectedStyle }\n              key={`${index}-${item}`}\n              selected={isSelected}\n              onClick={() => handleFilterChange(statusFilters[item])}\n            >\n              {item}\n            </Btn>\n          )}\n        )\n      }\n    </FilterBox>\n  );\n  \n}\n\n","import styled from \"@emotion/styled\";\n\nexport const Card = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 4px;\n  padding: 8px 8px;\n`\n\nexport const FieldContact = styled.div`\n  width: 100%;\n  padding-left: 4px;\n  padding-right: 4px;\n  display: flex;\n  align-content: center;\n  flex-direction: column;\n  align-items: flex-start;\n  flex-wrap: nowrap;\n`\n\nexport const FieldNumber = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  flex-wrap: nowrap;\n`\n\nexport const FieldName = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  flex-wrap: nowrap;\n`\n\nexport const Name = styled.p`\n  margin: 0;\n  padding: 2px 8px;\n`\n\nexport const Number = styled.p`\n  margin: 0;\n  padding: 2px 8px;\n`\n\nexport const Checkbox = styled.input`\n  width: 18px;\n  height: 18px;\n  cursor: pointer;\n`\n","import styled from \"@emotion/styled\";\nimport {Button} from \"../Forms/Buttons.styles\"\n/*\n * Стили компонента Modal\n */\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 100;\n`\n\nexport const BoxModal = styled.div`\n  position: relative;\n  max-width: calc(100vw - 36px);\n  width: 270px;\n  padding-top: 68px;\n  padding-bottom: 36px;\n  padding-left: 12px;\n  padding-right: 12px;\n  background-color: white;\n`\n\nexport const ModalButtonClose = styled(Button)`\n  position: absolute;\n  top: 18px;\n  right: 12px;\n  border-radius: 4px;\n  color: black;\n  background-color: #e2e5e8;\n`\n\nexport const ModalTitle = styled.div`\n  position: absolute;\n  bottom: 4px;\n  left: 12px;\n  width: calc(100% - 24px);\n  padding-left: 12px;\n  color: grey;\n  background-color: rgba(0, 0, 0, 0.6);\n`\n\nexport const ModalImage = styled.img`\n  width: 100%;\n  height: calc(100vh - 48px);\n  object-fit: cover;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`\n","import React, { Component } from \"react\";\nimport { createPortal } from \"react-dom\";\n// import PropTypes from 'prop-types';\n\n// import { Loader } from \"components/Loader/Loader\";\nimport { MdClose } from 'react-icons/md';\n\n// style\nimport { Overlay, BoxModal, ModalButtonClose, ModalImage, ModalTitle, } from \"./Modal.styled\";\n\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport class Modal extends Component {\n  \n  state = {\n    loaded: false,\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleKeyDown);\n\n    this.setState({ loaded: true });\n  }\n\n  onLoadedLargeImage = () => {\n    this.setState({ loaded: false });\n  }\n\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeyDown)\n  }\n\n\n  // close modal for press in ESC\n  handleKeyDown = e => {\n    if (e.code === 'Escape') {\n      // console.log(\"You press ESC\");\n      this.props.onClose();\n    }\n  }\n\n  \n  // close modal for click in backdrop || button\n  handleBackdropClick = e => { \n    if (e.currentTarget === e.target) { \n       this.props.onClose();\n    }\n  }\n\n  handleCloseButtonClick = e => { \n    this.props.onClose();\n  }\n\n  render() {\n    const { children, src='', title='' } = this.props;\n    const { loaded } = this.state;\n    \n    return createPortal(\n      <Overlay onClick={ this.handleBackdropClick }>\n       \n        <BoxModal>\n\n          {/* {loaded && <Loader /> } */}\n\n          { children }\n          { src && (<ModalImage onLoad={  this.onLoadedLargeImage } src={ src } alt={ title } /> )}\n\n            <ModalButtonClose type=\"button\" onClick={ this.handleCloseButtonClick }>\n              <MdClose size={12} />\n            </ModalButtonClose>\n\n          { !loaded && \n            <ModalTitle>\n              { title }\n            </ModalTitle>\n          }\n        </BoxModal>\n      \n      </Overlay>\n    , modalRoot)\n  };\n}\n\n// Modal.propTypes = {\n//   src : PropTypes.string.isRequired,\n//   title: PropTypes.string.isRequired,\n//   onClose : PropTypes.func.isRequired,\n// };","import { useDispatch } from 'react-redux';\nimport { MdClose, MdEdit, MdAccountBox, MdOutlinePhoneAndroid,} from 'react-icons/md';\nimport PropTypes from 'prop-types'; // ES6'\n\nimport { deleteContactThunk, } from \"redux/operations\";\n\nimport { Card, Name, Checkbox, Number, FieldContact, FieldName, FieldNumber } from './Contact.styled';\nimport { ButtonDelete, ButtonEdit } from '../../Forms/Buttons.styles';\nimport { useState } from 'react';\nimport { Modal } from 'components/Modal/Modal';\nimport { FormContact } from 'components/Forms/FormContact/FormContact';\nimport { toggleCompleted } from 'redux/contactsSlice';\n\nexport const Contact = ({contact}) => {\n  const dispatch = useDispatch();\n  const {id, name, number, selected=false} = contact;\n\n  const [showModal, setShowModal] = useState(false);\n\n  const handleDelete = () => dispatch(deleteContactThunk(id));\n  // const handleToggle = () => dispatch(toggleCompletedThunk(contact));\n  const handleToggle = () => dispatch(toggleCompleted(contact));\n  const handleEdit = () => { toggleModal() };\n\n  // відкриття / закриття модалки\n  const toggleModal = () => {\n    setShowModal( !showModal );\n  }\n\n  return (\n    <Card>\n\n      <label>\n        <Checkbox \n          type=\"checkbox\"\n          checked={ selected }\n          onChange={ handleToggle } \n        />\n      </label>\n\n      <FieldContact>\n        <FieldName>\n          <MdAccountBox size={18} />\n          <Name> { name } </Name>\n        </FieldName>\n    \n        <FieldNumber>\n          <MdOutlinePhoneAndroid size={18} />\n          <Number> { number } </Number>\n        </FieldNumber>\n      </FieldContact>\n\n      <ButtonEdit type=\"button\" onClick={ handleEdit }>\n        <MdEdit size={18} /> \n      </ButtonEdit>\n\n      <ButtonDelete type=\"button\" onClick={ handleDelete }>\n        <MdClose size={18} />\n      </ButtonDelete>\n\n      { showModal && (\n          <Modal\n            onClose={ toggleModal }\n          >\n            <FormContact \n              contact={contact} \n              onClose={ toggleModal }\n            />\n          </Modal> \n        )}\n     \n    </Card>\n  )\n}\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      selected: PropTypes.bool,\n    }).isRequired\n}","import styled from \"@emotion/styled\";\n\nexport const ListContacts = styled.ul`\n  text-decoration: none;\n  margin: 0;\n  padding-left: 0;\n  list-style: none;\n  overflow-y: auto;\n  width: 100%;\n  max-height: calc(100vh - 391px); // 70+16+50+30-16+32+16+104+16+27+16+30+30=391\n  min-height: 240px;\n`\nexport const ListItem = styled.li`\n  background-color: lightsteelblue;\n\n  &:nth-of-type(odd) {\n    background-color: lightcyan;\n  }\n`\n\nexport const WarningBox = styled.div`\n  width: 100%;\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n  color: orangered;\n`\n\nexport const ItemButton = styled.button`\n  display: inline-block;\n  outline: 1px solid black;\n  border: none;\n  min-width: 75px;\n  height: 24px;\n  margin: 0;\n  padding: 0;\n  margin-right: 10px;\n  border-radius: 5px;\n\n  &:hover, &:active {\n    cursor: pointer;\n    background-color: cyan;\n    border: 1px solit black;\n  }\n\n  &:active {\n    background-color: tomato;\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);;\n  }\n`\n","import { useSelector } from 'react-redux';\n\nimport { selectVisibleContacts } from 'redux/selectors';\nimport { Contact } from '../Contact/Contact';\nimport { WarningBox, ListContacts, ListItem, } from './ContactsList.styled';\n\n\nexport const ContactsList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const showContacts = Array.isArray(visibleContacts) && visibleContacts.length > 0;\n  \n  if (!showContacts) {\n    return (\n      <WarningBox>Sorry, you don't have more contacts</WarningBox>\n    )\n  }\n\n  return (\n    <ListContacts>\n      {\n        visibleContacts.map((item) =>\n          <ListItem key={ item.id }>\n            <Contact contact={ item } />\n          </ListItem>)\n      }\n    </ListContacts>\n  );\n}\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { MdAddIcCall } from 'react-icons/md';\n\n\n// redux\nimport { requestContactsThunk } from \"redux/operations\";\nimport { selectError, selectLoading, selectAuthetification } from \"redux/selectors\";\n\n// components\nimport { Loader } from \"components/Loader/Loader\";\nimport { Section } from \"../Section/Section\";\nimport { FormContact } from \"../Forms/FormContact/FormContact\";\nimport { Search } from \"./Search/Search\";\nimport { Filter } from \"./Filter/Filter\";\nimport { ContactsList } from \"./ContactsList/ContactsList\";\nimport { Modal } from 'components/Modal/Modal';\n\n// style\nimport { ButtonAddContact } from \"components/Forms/Buttons.styles\";\n\n\nexport const Phonebook = () => {\n  \n  const dispatch = useDispatch();\n\n  const loading = useSelector(selectLoading);\n  const error = useSelector(selectError);\n  const authetification = useSelector(selectAuthetification);\n\n  const [showModal, setShowModal] = useState(false);\n\n  useEffect(() =>  {\n    if (!authetification) return\n\n    dispatch(requestContactsThunk());\n  }, [dispatch, authetification]);\n\n  \n  const handleAddContact = () => {toggleModal()}\n  \n  // відкриття / закриття модалки\n  const toggleModal = () => {\n    setShowModal( !showModal );\n  }\n\n\n  return (\n    <>\n      <Section>\n        <ButtonAddContact onClick={handleAddContact}>\n          Add contact\n          <MdAddIcCall size={24} />\n        </ButtonAddContact>\n      </Section>\n\n      <Section>\n        <Search />\n        <Filter />\n      </Section>\n      \n      <Section title={\"Contacts\"}>\n\n        { loading && <Loader />}\n        { error && <p>Error... { error }</p>}\n        { loading && !error && <b>Request in progress...</b> }\n        \n        {!error && <ContactsList />}\n      </Section>\n      \n      { showModal && (\n          <Modal\n            onClose={ toggleModal }\n          >\n            <FormContact contact={{name:\"\", number:\"\"}} onClose={ toggleModal }/>\n          </Modal> \n        )}\n    </>\n  )\n}\n","import { useSelector } from 'react-redux';\n\nimport {selectAuthetification, } from 'redux/selectors';\nimport { Phonebook } from 'components/Phonebook/Phonebook';\n// import { Section } from 'components/Section/Section';\n\nexport const ContactsPage = () => { \n\n  const authetificated = useSelector(selectAuthetification);\n  if (!authetificated) return;\n\n  return(\n    // <Section> \n      <Phonebook />\n    // </Section>\n  )\n}\n\nexport default ContactsPage"],"names":["Button","styled","ButtonDelete","ButtonEdit","ButtonAddContact","ButtonSaveContact","ButtonsBox","colorsValid","error","success","valid","invalid","FieldBox","props","FieldLabel","FieldInput","FieldPosition","FieldFeedback","FieldHelpText","Link","NavLink","TextInputLiveFeedback","label","helpText","useField","field","meta","useState","didFocus","setDidFocus","showFeedback","value","trim","length","touched","htmlFor","id","type","name","required","onFocus","tabIndex","Title","SectionApp","Section","title","children","FormContact","contact","onClose","dispatch","useDispatch","contacts","useSelector","selectContacts","handleSubmit","values","handleUpdate","handleNewSave","contactName","number","contactNumber","updateContactThunk","selected","toast","findName","toLowerCase","some","item","isFound","addContactThunk","configFormik","useFormik","initialValues","onSubmit","validationSchema","Yup","min","max","matches","placeholder","Search","onChange","e","query","currentTarget","setFindQuery","css","_len","arguments","args","Array","_key","serializeStyles","Btn","FilterBox","ReactJSXRuntime","jsx","key","hasOwnProperty","Emotion","createEmotionProps","Filter","filter","selectStatusFilter","isSelectedStyle","backgroundColor","color","btn","Object","keys","statusFilters","map","index","isSelected","onClick","setStatusFilter","handleFilterChange","Card","FieldContact","FieldNumber","FieldName","Name","Number","Checkbox","Overlay","BoxModal","ModalButtonClose","ModalTitle","ModalImage","modalRoot","document","querySelector","Modal","state","loaded","onLoadedLargeImage","setState","handleKeyDown","code","handleBackdropClick","target","handleCloseButtonClick","window","addEventListener","this","removeEventListener","src","createPortal","onLoad","alt","size","Component","Contact","showModal","setShowModal","toggleModal","checked","toggleCompleted","deleteContactThunk","ListContacts","ListItem","WarningBox","ContactsList","visibleContacts","selectVisibleContacts","isArray","Phonebook","loading","selectLoading","selectError","authetification","selectAuthetification","useEffect","requestContactsThunk","Loader","ContactsPage"],"sourceRoot":""}
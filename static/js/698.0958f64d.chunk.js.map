{"version":3,"file":"static/js/698.0958f64d.chunk.js","mappings":"4UASaA,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAGXC,EAAY,mCAAG,WAAOC,GAAP,2EACHC,EAAgDD,EAAzDE,SAAyBC,EAAgCH,EAA1CI,UAA8BC,EAAYL,EAAzBM,aAEvCT,GACEU,EAAAA,EAAAA,IAAkB,CAChBN,KAAAA,EACAE,MAAAA,EACAE,SAAAA,KAPe,2CAAH,sDAaZG,GAAeC,EAAAA,EAAAA,IAAU,CAC7BC,cAAe,CACbR,SAAU,GACVE,UAAW,GACXE,aAAc,IAEhBK,SAAS,WAAD,wBAAE,WAAOX,GAAP,0FAAkBD,EAAaC,IAA/B,2CAAF,mDAAC,GACTY,iBAAkBC,EAAAA,GAAW,CAE3BX,SAAUW,EAAAA,KACPC,IAAI,EAAG,iCACPC,IAAI,GAAI,mCACRC,QACC,aACA,+CAEDC,SAAS,wBAEZb,UAAWS,EAAAA,KACRG,QACC,4CACA,yBAEDC,SAAS,qBAEZX,aAAcO,EAAAA,KACXC,IAAI,EAAG,iCACPG,SAAS,4BAIhB,OACE,SAAC,KAAD,CAAgBC,MAAOV,EAAvB,UACE,UAAC,KAAD,YACA,SAACW,EAAA,EAAD,CACIC,MAAM,WACNC,GAAG,WACHpB,KAAK,WACLqB,YAAY,kBACZC,SAAS,iEACTC,KAAK,UAEP,SAACL,EAAA,EAAD,CACEM,KAAK,OACLL,MAAM,QACNC,GAAG,YACHpB,KAAK,YACLqB,YAAY,gBACZC,SAAS,qBACTC,KAAK,WAEP,SAACL,EAAA,EAAD,CACEC,MAAM,WACNC,GAAG,eACHpB,KAAK,eACLqB,YAAY,iBACZC,SAAS,4BACTC,KAAK,cAGP,UAAC,KAAD,YACE,SAAC,KAAD,CAAcA,KAAK,SAAnB,SAA4B,aAC5B,SAAC,KAAD,CAAaA,KAAK,QAAlB,SAA0B,iBAOnC,ECtFYE,EAAe,WAK1B,OACE,SAACC,EAAA,EAAD,CAASC,MAAM,wBAAf,UACE,SAAChC,EAAD,KAGL,EAED,G","sources":["components/Forms/FormRegister/FormRegister.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\r\nimport { useFormik, FormikProvider, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport { registerUserThunk } from '../../../redux/authOperations'\r\n// style\r\nimport { TextInputLiveFeedback } from 'components/Forms/TextInputLiveFeedback/TextInputLiveFeedback';\r\nimport { ButtonSaveContact as ButtonSignUp, ButtonSaveContact as ButtonReset, ButtonsBox } from '../Buttons.styles';\r\n\r\nexport const FormRegister = () => {\r\n  const dispatch = useDispatch()\r\n\r\n\r\n  const handleSubmit = async (values) => {\r\n    const {userName:name, userEmail:email, userPassword:password} = values;\r\n    \r\n    dispatch(\r\n      registerUserThunk({\r\n        name,\r\n        email,\r\n        password,\r\n    }))\r\n    \r\n  }\r\n\r\n  // ==== configFormik\r\n  const configFormik = useFormik({\r\n    initialValues: { \r\n      userName: \"\", \r\n      userEmail: \"\", \r\n      userPassword: \"\", \r\n    },\r\n    onSubmit: async (values) => handleSubmit(values),\r\n    validationSchema: Yup.object({\r\n\r\n      userName: Yup.string()\r\n        .min(3, 'Must be at least 3 characters')\r\n        .max(40, 'Must be less than 40 characters')\r\n        .matches(\r\n          /^[\\w-/']+$/,\r\n          'Cannot contain special characters or spaces'\r\n        )\r\n        .required('Username is required'),\r\n\r\n      userEmail: Yup.string()\r\n        .matches(\r\n          /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\r\n          'Invalid email address'\r\n        )\r\n        .required('Email is required'),\r\n\r\n      userPassword: Yup.string()\r\n        .min(7, 'Must be at least 7 characters')\r\n        .required('Password is required'),\r\n    }),\r\n  });\r\n \r\n  return (\r\n    <FormikProvider value={configFormik}>\r\n      <Form>\r\n      <TextInputLiveFeedback\r\n          label=\"Username\"\r\n          id=\"userName\"\r\n          name=\"userName\"\r\n          placeholder=\"Enter your name\" \r\n          helpText=\"Must be 3-40 characters and cannot contain special characters.\"\r\n          type=\"text\"\r\n        />\r\n        <TextInputLiveFeedback\r\n          icon='mail'\r\n          label=\"Email\"\r\n          id=\"userEmail\"\r\n          name=\"userEmail\"\r\n          placeholder=\"user@mail.com\" \r\n          helpText=\"x.0-9_+x@x.0-9x.xx\"\r\n          type=\"email\"\r\n        />\r\n        <TextInputLiveFeedback\r\n          label=\"Password\"\r\n          id=\"userPassword\"\r\n          name=\"userPassword\"\r\n          placeholder=\"Enter password\" \r\n          helpText=\"Must be more 7 characters\"\r\n          type=\"password\"\r\n        />\r\n\r\n        <ButtonsBox>\r\n          <ButtonSignUp type=\"submit\">Sing Up</ButtonSignUp>\r\n          <ButtonReset type=\"reset\">Reset</ButtonReset>\r\n        </ButtonsBox>\r\n\r\n      </Form>\r\n    </FormikProvider>\r\n  );\r\n\r\n}","// import { useSelector } from 'react-redux';\r\n// import { Navigate } from 'react-router-dom';\r\n\r\n// import {selectAuthetification} from 'redux/selectors';\r\nimport { Section } from \"components/Section/Section\"\r\n\r\nimport { FormRegister } from \"components/Forms/FormRegister/FormRegister\"\r\n\r\n\r\nexport const RegisterPage = () => { \r\n  \r\n  // const authetificated = useSelector(selectAuthetification);\r\n  // if(authetificated) return <Navigate to='/contacts' />\r\n\r\n  return(\r\n    <Section title='Register Your Account'>\r\n      <FormRegister /> \r\n    </Section>\r\n  )\r\n}\r\n\r\nexport default RegisterPage"],"names":["FormRegister","dispatch","useDispatch","handleSubmit","values","name","userName","email","userEmail","password","userPassword","registerUserThunk","configFormik","useFormik","initialValues","onSubmit","validationSchema","Yup","min","max","matches","required","value","TextInputLiveFeedback","label","id","placeholder","helpText","type","icon","RegisterPage","Section","title"],"sourceRoot":""}